#define _CRT_SECURE_NO_WARNINGS
#include "Header.h"
using namespace std;

void Description()
{
	cout << " В этой программе вы сможете: " << endl
		<< " 1. Сгенерировать задачи из 23 задания из ЕГЭ по информатике с заданными параметрами." << endl
		<< " 2. Получить ответы на сгенерированные задачи." << endl
		<< " 3. Сохранить сгенерированные задачи в нужный вам файл." << endl
		<< " 4. Провести игру \"Вопрос-ответ\" и понять уровень своих знаний." << endl
		<< " Условие задачи программа подбирает по заданным пользователем параметрам." << endl
		<< " Значения для задач программа подбирает случайным образом из приемлемого для решения диапазона значений." << endl; 
	cout << " ==============================================================" << endl;
	cout << " Для перехода в меню настройки параметров нажмите любую клавишу: " << endl << " ";
	cout << "=> ";
	_getch();
}

int TotalNumberOfTasks() // Количество генерируемых задач
{
	int NumberT;
	cout << " Сколько задач требуется сгенерировать? " << endl 
		<< " Ожидаемое количество: от \"1\" до \"100\" включительно. " << endl  
		<< " Если генерация задач не требуется, то введите \"0\" и программа завершится." << endl << " ";
	do
	{
		cout << "=> ";
		cin >> NumberT;
		if (NumberT < 0) { cout << " Количество задач не может быть отрицательным. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberT > 100) { cout << " Количество задач слишком большое. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberT == 0) { cout << " Программа завершает свою работу. До свидания :) " << endl; }
		else { cout << " Прекрасно. Задач будет сгенерировано: " << NumberT << endl; }
	} while ((NumberT < 0) or (NumberT > 100));
	
	return NumberT;
}

int TotalNumberOfSteps() // Количество шагов
{
	int NumberS;
	cout << " Сколько вариантов шага должно быть в задаче? " << endl
		<< " Ожидаемое количество: \"2\" или \"3\". " << endl << " ";
	do
	{
		cout << "=> ";
		cin >> NumberS;
		if (NumberS < 2) { cout << " Слишком мало вариантов шага. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberS > 3) { cout << " Вариантов шага слишком много. Попробуйте ввести другое значение:" << endl << " "; }
		else { cout << " Чудесно. Шагов в сгенерированных задачах будет: " << NumberS << endl; }
	} while ((NumberS < 2) or (NumberS > 3));

	return NumberS;
}

int TotalNumberOfRequiredPoints() // Количество обязательных точек
{
	int NumberRP;
	cout << " Сколько чисел обязательно должна содержать траектория вычислений программы? " << endl
		<< " Ожидаемое количество: от \"0\" до \"3\" включительно. " << endl << " ";
	do
	{
		cout << "=> ";
		cin >> NumberRP;
		if (NumberRP < 0) { cout << " Количество чисел не может быть отрицательным. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberRP > 3) { cout << " Слишком много чисел для траектории вычислений. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberRP == 0) { cout << " Прекрасно. Траектория вычислений не содержит обязательных чисел. " << endl; }
		else { cout << " Супер. Обязательных чисел в траектории: " << NumberRP << endl; }
	} while ((NumberRP < 0) or (NumberRP > 3));

	return NumberRP;
}

int TotalNumberOfBannedPoints() // Количество запрещенных точек
{
	int NumberBP;
	cout << " Сколько чисел обязательно не должно содержаться в траектории вычислений программы? " << endl
		<< " Ожидаемое количество: от \"0\" до \"3\" включительно. " << endl << " ";
	do
	{
		cout << "=> ";
		cin >> NumberBP;
		if (NumberBP < 0) { cout << " Количество чисел не может быть отрицательным. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberBP > 3) { cout << " Слишком много чисел для траектории вычислений. Попробуйте ввести другое значение:" << endl << " "; }
		else if (NumberBP == 0) { cout << " Прекрасно. Траектория вычислений не содержит запрещенных чисел. " << endl; }
		else { cout << " Прекрасно. Запрещенных чисел в траектории: " << NumberBP << endl; }
	} while ((NumberBP < 0) or (NumberBP > 3));

	return NumberBP;
}

int OperatingMode() // Выбор режима работы
{
	int Mode;
	int Zero = 1;
	do
	{
		
		cout << " Выберите дальнейший режим работы." << endl
			<< " 1) Режим \"Запись задачи в файл\"" << endl
			<< " 2) Режим \"Вопрос - ответ\"" << endl;
		if (Zero == 1) { cout << " Для ознакомления с режимами работы введите \" 0 \"" << endl; }
		cout << " => ";
		cin >> Mode;
		if ((Mode == 0) and (Zero == 1)) 
		{ 
			cout << " Описание режимов " << endl ;
			cout << " 1) \"Запись задачи в файл\" " << endl
				<< " Этот режим служит для того, чтобы сгенерированные задачи и ответы к ним записывались в файл." << endl
				<< " Пользователю предлагается выбрать файл в формате \"txt\" для сохранения данных: " << endl
				<< " 1. Пользователь может указать путь к конкретному файлу." << endl
				<< " 2. Пользователь может выбрать для сохранения файл по умолчанию" << endl
				<< " Файл по умолчанию - это текстовый файл созданный программой на рабочем столе по название \"Задание 23\"." << endl
				<< " Затем в файл сохраняются задачи и ответы." << endl
				<< " Если выбранный файл оказался не пустым, то программа прозводит запись с новой строки.";
			cout << " 2) \"Вопрос - ответ\" " << endl
				<< " Этот режим служит для того, чтобы выводить сгенерированные задачи по очереди и реагировать на ответ пользователя." << endl
				<< " После этого программа выводит статистику и оценку ответов пользователя." << endl
				<< " Статистика состоит из количества всех задач и количества решенных задач."
				<< " Оценка ответов заключается в выводе основанном на процентном соотношении решенных задач." << endl;
			cout << " ==============================================================" << endl;
			Zero = 0;
		}
		else if (((Mode < 1) or (Mode > 2))) { cout << " Режима с таким номером не существует. Попробуйте ввести другое значение:" << endl; }
		else 
		{ 
			switch (Mode)
			{
			case 1: {cout << " Супер. Вы выбрали режим \"Запись задачи в файл\" " << endl; break; }
			case 2: {cout << " Супер. Вы выбрали режим \"Вопрос - ответ\" " << endl; break; }
			default: break;
			}
		}
	} while ((Mode < 1) or (Mode > 2));
	
	return Mode;
}

void FirstMode(const int QuanityOfTasks, const int QuanityOfSteps, const int QuanityOfRequiredPoints, const int QuanityOfBannedPoints) // Режим 1: "Запись задачи в файл"
{
	system("cls");
	int V;
	do
	{
		cout << " Укажите способ выбора файла для сохранения: " << endl
			<< " 1) Указать адрес файла самостоятельно " << endl
			<< " 2) Выбрать файл по умолчанию" << endl;
		cout << " => ";
		cin >> V;
		if ((V < 1) or (V > 2)) { cout << " Введено неверное значение. Попробуйте ввести другое значение." << endl; }
		else if (V == 2) { cout << " Сохранение будет произведено в файл по умолчанию" << endl; }
	} while ((V < 1) or (V > 2));
	cin.get();
	if (V == 1)
	{
		FILE* file;
		char filename[255];
		do
		{
			cout << " Введите имя файла. " << endl
				<< " На ввод ожидается путь к файлу. " << endl;
			cout << " => ";
			gets_s(filename, 255);
			file = fopen(filename, "w");
			if (file == NULL) { cout << " Доступ к файлу запрещен. Попробуйте ввести другой адрес." << endl; }
		}while (file == NULL);

		fclose(file);
	}
	else
	{
		FILE* file;
		char filename [BUFSIZ] = "C:\\Users\\kiril\\Desktop\\Задание 23.txt";
		fopen_s(&file, filename, "w");

		fclose(file);
	}
}

void SecondMode(const int QuanityOfTasks, const int QuanityOfSteps, const int QuanityOfRequiredPoints, const int QuanityOfBannedPoints) // Режим 2: "Вопрос-ответ"
{
	system("cls");
	struct Data
	{
		int InitialNumber;
		int FiniteNumber;
		int Operation[];
	};
	for (int i = 0; i < QuanityOfTasks; i++)
	{
		Generation(QuanityOfSteps, QuanityOfRequiredPoints, QuanityOfBannedPoints);
	}
}

void Generation(const int QuanityOfSteps, const int QuanityOfRequiredPoints, const int QuanityOfBannedPoints) // Генерация задач
{
	


}

int Answer() // Ответ к задаче
{
	
	
	
	return 1;
}